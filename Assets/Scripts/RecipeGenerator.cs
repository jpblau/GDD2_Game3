using System.Collections;
using System.Collections.Generic;
using UnityEngine;

using System.IO;
using System.Linq;

public class RecipeGenerator : MonoBehaviour
{
    private List<string> generatedRecipe;   //The recipe generated by GenerateRecipe()
    private List<string> chosenIngredients; //The list of ingredients that the player has chosen in this round

    private string[] ingredientList;
    int ingredientCount;

    // Start is called before the first frame update
    void Start()
    {
        //testing both methods
        ReadIngredients();
        foreach (string s in GenerateIngredientList())
        {
            Debug.Log(s);
        }
    }

    // Update is called once per frame
    void Update()
    {
        
    }


    /// <summary>
    /// Generates a new Recipe based on the difficulty and the number of players
    /// Easy = 4 Items (+1 item for every player over 4)
    /// Medium = 5 Items (+1 item for every player over 5)
    /// Hard = 7 Items (+1 item for every player over 7, up to a max of 8)
    /// </summary>
    /// <returns>List<string> of ingredients in the recipe</returns>
    public List<string> GenerateRecipe()
    {
        List<string> recipe = new List<string>();

        for (int i = 0; i < 4; i++)
        {
            recipe.Add(ingredientList[Random.Range(0, ingredientCount)].Split('-')[0]);
        }

        return recipe;
    }


    /// <summary>
    /// Selects 4 random ingredients from a category, and compiles them into an array
    /// One of the "random" ingredients must be an item from the generatedRecipe
    /// None of these items should be in both the chosenIngredients and generatedRecipe lists
    /// </summary>
    /// <returns>List<string> of ingredients for the player to choose from</returns>
    public List<string> GenerateIngredientList()
    {
        List<string> ingredients = new List<string>();

        //Randomly pick the first ingredient, making sure it is one of the ingredients on the recipe
        int index = Random.Range(0, ingredientCount);
        ingredients.Add(ingredientList[index].Split('-')[0]);

        //Get the list of attributes associated with the chosen ingredient
        string[] attributes = ingredientList[index].Split('-')[1].Split(' ');

        while(ingredients.Count < 4)
        {
            int newIndex = Random.Range(0, ingredientCount);

            //Get ingredient and the list of attributes pertaining to the new ingredient
            string newIngredient = ingredientList[newIndex].Split('-')[0];
            string[] newAttributes = ingredientList[newIndex].Split('-')[1].Split(' ');

            /////////////////////
            Debug.Log("ATTRIBUTES: ");
            foreach (string s in attributes)
            {
                Debug.Log(s);
            }
            Debug.Log("\nNEW ATTRIBUTES: ");
            foreach (string s in newAttributes)
            {
                Debug.Log(s);
            }
            //////////////////////

            //If the new ingredient has a matching attribute, and it has already not been selected, add it to the list
            for (int i = 0; i < newAttributes.Count(); i++)
            {
                if (/*attributes.Contains(newAttributes[i]) && */ ingredients.Contains(newIngredient) == false)
                {
                    ingredients.Add(newIngredient);
                    break;
                }
            }
        }

        return ingredients;
    }

    /// <summary>
    /// Called when the user chooses an ingredient to add to the recipe
    /// Adds a new ingredient to the list of chosenIngredients
    /// </summary>
    /// <param name="newIngredient"></param>
    public void AddChosenIngredient(string newIngredient)
    {
        chosenIngredients.Add(newIngredient);
    }

    /// <summary>
    /// Reads in text file and generates list of ingredients with each associated attribute.
    /// Also calculates the number of ingredients from the list
    /// </summary>
    private void ReadIngredients()
    {
        string path = "Assets/IngredientsList.txt";

        StreamReader reader = new StreamReader(path);
        ingredientCount = File.ReadLines(path).Count();
        ingredientList = reader.ReadToEnd().Split('\n');
    }
}